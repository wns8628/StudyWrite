 
지금까지  xml로 config를 했는데
이제 java config를 배워보자
	↓
 springcontainer 예제봐라 

  xml 설정? - 컨테이너안에 빈설정 같은거 전부 xml로 했잔아


 
 java Config     xml config
	 |------|
	    |- 설정방식 : 컴포넌트,서비스,레파지토리,컨트롤러,오토와이어등		
		        (어노테이션 스캐닝해서 생성하는 방법 1)
		         *마이바티스는 스캐닝안하고 직접 빈생성한거임!

	    |- 설정방식2: 직접 빈생성 (스캐닝이아니라. 마이바티스처럼)

 		     
*@Inject == @Autowired 랑 같다고봐도 무방

--
 즉 예제    
  CD - 스캐닝 방법써라
DVD - 직접빈생성방법써라

com.douzone.springcontainer.soundsystem -> 컴포넌트 스캐닝
				 	@component. @autowire

com.douzone.springcontainer.videosystem -> @Bean
---------------

 java config 장점 : 자바문법을 타잔아 그래서 더 명확하지 ? 

-------------
    ApplicationContext : 인터페이스 
              △
               |
 [ConfigurableApplicationContext.close.등등 ] - 구현체? 
 	  △
             ~~~자식들?
-----

 Junit 테스트툴 

   	  <!-- JUnit to Test -->
	  <dependency>
	  	<groupId>junit</groupId>
	  	<artifactId>junit</artifactId>
	  	<version>4.12</version>
	  	<scope>test</scope>
	  </dependency>

    	 <!-- Test?? -->
	  <dependency>
	  	<groupId>org.springframework</groupId>
	  	<artifactId>spring-test</artifactId>
	  	<version>${org.springframework-version}</version>
	  	<scope>test</scope>
	  </dependency>


스프링환경 
@RunWith(SpringJUnit4ClassRunner.class) //스프링환경에서는 이걸써야됨 , 돌려줌 ?
@ContextConfiguration(classes=AppConfig01.class) //컨테이너를 직접안만들어도 이거붙이면 알아서 만들어줌 
:
--------
|User  |---------- Appconfig 컨테이너
|  ↓   |		   ..
|  user
| maintest
|------|  		   ..
  
----
xml에 
   xmlns:c="http://www.springframework.org/schema/c"  
   xmlns:p="http://www.springframework.org/schema/p"  
   xmlns:util="http://www.springframework.org/schema/util"  
 
이건거의 디폴트로 넣으셈 

-------------------------------------------------------------------------------------------


    1. 자바 config
	-자동설정: 컴포넌트 스캔 , 오토와이어
	- 명시적설정 : @Bean @Inject 	

	jc1 <- jc2 <- jc3.... 
 	         -파일업로드설정(jc2) , 보안설정(jc3) ..등등
	jc1에서 임포트해서씀 
	
    2. XML config 
	-자동설정 : 컴포넌트스캔, 오토와이어
  	-명시적설정:<Bean..

------------------------------------------------------------------------------------------
 마이사이트3를 바꿔보자 config 트리 

=================================================================

WEB-INF
   |------ classes <- [src/main/java, src/main/resources]
           |------ com
    	          |------ douzone
         			|------ /config
              		          |------ /app
              		          |             |------ DBConfig.class
              		          |             |------ MyBatisConfig.class
            		          |             |------ /mybatis
          			          |             |             |------ configuration.xml
             		          |             |             |------ /mappers
          			          |             |                           |------ user.xml
  
    			          |	            |----- /properties   
			          |	 	|	 |------ jdbc.properties
             		          |             |
              		          |		
           			          |------ /web
        			          |             |------ MVCConfig.class
          			          |             |------ SecurityConfig.class
            		          |             |------ /messages   
          			          |             |	 |------ messages_ko.properties   		
			          |             |------ /properties  
                                              |             |              |------ multipart.properties
							

리소스에만드셈 : com.douzone.config.app.properties : 디비커넥션같은거뺴자?
	         com/douzone/config/web/messages/messages_ko.properties
	         com/douzone/config/web/properties/multipart.properties
=================================================================


1.Maven Project 생성
2. POM 설정
3. web.xml 설정 

  Controller <- Service <- Repository <- sqlSession  이렇게 주입됨 (다바꾸는건 왠만하면 하지마라.. )

4. AppConfig
    |---- DBConfig : DataSource 설정			  -- 나중에 재사용가능
    |		jdbc.properties
    |---- MyBatisConfig : sqlSession, SqlSessionFactory설정  -- 나중에 재사용가능
          

5. WebConfig 설정 
    |--MVCConfig : ViewResolver , DefaultServletHandler, Message Converter
    |--SecurityConfig : Interceptor,ArgumentResolver
    |--MessageConfig: MessageSource
		    message_ko.properties
    |--FileUploadConfig : MultipartResolver, Resource
			

6. GlobalExceptionHandler


7. slf4j, Logback 


-------------------

 web.xml    1. listener
               2.Filter
               3.Servlet
 	   4.디스패처서블릿 
               5. welcome  
	   6.  ..
	 
	1.디스패처서블릿 url매핑
 리스너?  2. App config.class 지정
            3. web config.class  지정 


 톰캣 	/webinfo
	    |- ....class


1)톰캣이 '서블릿컨테이너이니셜라이저' 이걸찾는다(이걸구현한놈을찾겠찌) 클래스패쓰에서
2)'서블릿컨테이너이니셜라이저' 이게 웹애플리케이션이니셜라이저를구현한놈들을찾겠지 (우리가만들어야지)


	         <<인터페이스>>
	서블릿컨테이너이니셜라이저      
		△	
		 |
	스프링서블릿컨테이너이니셜라이저 : 이게 webinfo밑에 class를 스캔함  (얘가 디스패처서블릿 이런거다만듥ㅅ지)
				↘
				     <<인터페이스>>
				웹애플리케이션이니셜라이저 	 : 컨테이너 만들때 스프링서블릿컨테이너이니셜라이저가 이걸읽는다.
					△	
					 |
					<추상클래스>
				앱스트랙트어노테이션콘피그디스패처서블릿이니셜라이저
							△
							 |
						       이걸만들면됨 
		  

com.douzone.hellospring.initializer
com.douzone.hellospring.initializer
com.douzone.mysite.initializer
 
--------------------


프로젝트규모가커지면 

 Spring-Study
   |---- Spring-Study-container
   |---- Spring-Study-springex
   |---- Spring-Study-springex2
   |---- Spring-Study-mysite3
   |---- Spring-Study-mysite4



















